import org.junit.jupiter.api.Assertions
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.CsvSource
import kotlin.math.abs

class BaseFunctionsTest {
    @ParameterizedTest
    @CsvSource(
        value = [
            "  0   , 0 ,  1     ",
            "  0.5 , 0 ,  1     ",
            "  1   , 0 ,  1     ",
            "  1.5 , 0 ,  1     ",
            "  2   , 0 ,  1     ",
            "  0.4 , 0 ,  1     ",
            "  0.9 , 0 ,  1     ",
            "  1.4 , 0 ,  1     ",
            "  1.9 , 0 ,  1     ",
            "  0.1 , 0 ,  1     ",
            "  0.6 , 0 ,  1     ",
            "  1.1 , 0 ,  1     ",
            "  1.6 , 0 ,  1     ",
            "  2.1 , 0 ,  1     ",
            " -0.5 , 0 ,  1     ",
            " -1   , 0 ,  1     ",
            " -1.5 , 0 ,  1     ",
            " -2   , 0 ,  1     ",
            " -0.4 , 0 ,  1     ",
            " -0.9 , 0 ,  1     ",
            " -1.4 , 0 ,  1     ",
            " -1.9 , 0 ,  1     ",
            " -0.1 , 0 ,  1     ",
            " -0.6 , 0 ,  1     ",
            " -1.1 , 0 ,  1     ",
            " -1.6 , 0 ,  1     ",
            " -2.1 , 0 ,  1     ",
            "  0   , 1 ,  0     ",
            "  0.5 , 1 ,  0.5   ",
            "  1   , 1 ,  1     ",
            "  1.5 , 1 ,  1.5   ",
            "  2   , 1 ,  2     ",
            "  0.4 , 1 ,  0.4   ",
            "  0.9 , 1 ,  0.9   ",
            "  1.4 , 1 ,  1.4   ",
            "  1.9 , 1 ,  1.9   ",
            "  0.1 , 1 ,  0.1   ",
            "  0.6 , 1 ,  0.6   ",
            "  1.1 , 1 ,  1.1   ",
            "  1.6 , 1 ,  1.6   ",
            "  2.1 , 1 ,  2.1   ",
            " -0.5 , 1 , -0.5   ",
            " -1   , 1 , -1     ",
            " -1.5 , 1 , -1.5   ",
            " -2   , 1 , -2     ",
            " -0.4 , 1 , -0.4   ",
            " -0.9 , 1 , -0.9   ",
            " -1.4 , 1 , -1.4   ",
            " -1.9 , 1 , -1.9   ",
            " -0.1 , 1 , -0.1   ",
            " -0.6 , 1 , -0.6   ",
            " -1.1 , 1 , -1.1   ",
            " -1.6 , 1 , -1.6   ",
            " -2.1 , 1 , -2.1   ",
            "  0   , 2 ,  0     ",
            "  0.5 , 2 ,  0.25  ",
            "  1   , 2 ,  1     ",
            "  1.5 , 2 ,  2.25  ",
            "  2   , 2 ,  4     ",
            "  0.4 , 2 ,  0.16  ",
            "  0.9 , 2 ,  0.81  ",
            "  1.4 , 2 ,  1.96  ",
            "  1.9 , 2 ,  3.61  ",
            "  0.1 , 2 ,  0.01  ",
            "  0.6 , 2 ,  0.36  ",
            "  1.1 , 2 ,  1.21  ",
            "  1.6 , 2 ,  2.56  ",
            "  2.1 , 2 ,  4.41  ",
            " -0.5 , 2 ,  0.25  ",
            " -1   , 2 ,  1     ",
            " -1.5 , 2 ,  2.25  ",
            " -2   , 2 ,  4     ",
            " -0.4 , 2 ,  0.16  ",
            " -0.9 , 2 ,  0.81  ",
            " -1.4 , 2 ,  1.96  ",
            " -1.9 , 2 ,  3.61  ",
            " -0.1 , 2 ,  0.01  ",
            " -0.6 , 2 ,  0.36  ",
            " -1.1 , 2 ,  1.21  ",
            " -1.6 , 2 ,  2.56  ",
            " -2.1 , 2 ,  4.41  ",
            "  0   , 3 ,  0     ",
            "  0.5 , 3 ,  0.125 ",
            "  1   , 3 ,  1     ",
            "  1.5 , 3 ,  3.375 ",
            "  2   , 3 ,  8     ",
            "  0.4 , 3 ,  0.064 ",
            "  0.9 , 3 ,  0.729 ",
            "  1.4 , 3 ,  2.744 ",
            "  1.9 , 3 ,  6.859 ",
            "  0.1 , 3 ,  0.001 ",
            "  0.6 , 3 ,  0.216 ",
            "  1.1 , 3 ,  1.331 ",
            "  1.6 , 3 ,  4.096 ",
            "  2.1 , 3 ,  9.261 ",
            " -0.5 , 3 , -0.125 ",
            " -1   , 3 , -1     ",
            " -1.5 , 3 , -3.375 ",
            " -2   , 3 , -8     ",
            " -0.4 , 3 , -0.064 ",
            " -0.9 , 3 , -0.729 ",
            " -1.4 , 3 , -2.744 ",
            " -1.9 , 3 , -6.859 ",
            " -0.1 , 3 , -0.001 ",
            " -0.6 , 3 , -0.216 ",
            " -1.1 , 3 , -1.331 ",
            " -1.6 , 3 , -4.096 ",
            " -2.1 , 3 , -9.261 ",
        ]
    )
    fun testPow(x: Double, n: Int, expected: Double) {
        Assertions.assertEquals(expected, x.pow(n), 0.02)
    }

    @ParameterizedTest
    @CsvSource(
        value = [
            "  0                 ,  1                    ",
            "  0.523598775598299 ,  0.866025403784439    ",
            "  0.785398163397448 ,  0.707106781186548    ",
            "  1.0471975511966   ,  0.5                  ",
            "  1.5707963267949   ,  6.12323399573677E-17 ",
            "  2.0943951023932   , -0.5                  ",
            "  2.35619449019234  , -0.707106781186547    ",
            "  2.61799387799149  , -0.866025403784439    ",
            "  3.14159265358979  , -1                    ",
            "  3.66519142918809  , -0.866025403784439    ",
            "  3.92699081698724  , -0.707106781186548    ",
            "  4.18879020478639  , -0.5                  ",
            "  4.71238898038469  , -1.83697019872103E-16 ",
            "  5.23598775598299  ,  0.5                  ",
            "  5.49778714378214  ,  0.707106781186547    ",
            "  5.75958653158129  ,  0.866025403784438    ",
            " -0.017453292519943 ,  0.999847695156391    ",
            "  0.506145483078356 ,  0.874619707139396    ",
            "  0.767944870877505 ,  0.719339800338651    ",
            "  1.02974425867665  ,  0.515038074910054    ",
            "  1.55334303427495  ,  0.017452406437284    ",
            "  2.07694180987325  , -0.484809620246337    ",
            "  2.3387411976724   , -0.694658370458997    ",
            "  2.60054058547155  , -0.857167300702112    ",
            "  3.12413936106985  , -0.999847695156391    ",
            "  3.64773813666815  , -0.874619707139396    ",
            "  3.9095375244673   , -0.719339800338651    ",
            "  4.17133691226645  , -0.515038074910054    ",
            "  4.69493568786475  , -0.017452406437284    ",
            "  5.21853446346305  ,  0.484809620246337    ",
            "  5.4803338512622   ,  0.694658370458997    ",
            "  5.74213323906134  ,  0.857167300702112    ",
            "  0.017453292519943 ,  0.999847695156391    ",
            "  0.541052068118242 ,  0.857167300702112    ",
            "  0.802851455917391 ,  0.694658370458997    ",
            "  1.06465084371654  ,  0.484809620246337    ",
            "  1.58824961931484  , -0.017452406437284    ",
            "  2.11184839491314  , -0.515038074910054    ",
            "  2.37364778271229  , -0.719339800338651    ",
            "  2.63544717051144  , -0.874619707139396    ",
            "  3.15904594610974  , -0.999847695156391    ",
            "  3.68264472170804  , -0.857167300702112    ",
            "  3.94444410950718  , -0.694658370458998    ",
            "  4.20624349730633  , -0.484809620246338    ",
            "  4.72984227290463  ,  0.017452406437283    ",
            "  5.25344104850293  ,  0.515038074910054    ",
            "  5.51524043630208  ,  0.719339800338651    ",
            "  5.77703982410123  ,  0.874619707139395    ",
            " -6.28318530717959  ,  1                    ",
            " -5.75958653158129  ,  0.866025403784438    ",
            " -5.49778714378214  ,  0.707106781186547    ",
            " -5.23598775598299  ,  0.5                  ",
            " -4.71238898038469  , -1.83697019872103E-16 ",
            " -4.18879020478639  , -0.5                  ",
            " -3.92699081698724  , -0.707106781186548    ",
            " -3.66519142918809  , -0.866025403784439    ",
            " -3.14159265358979  , -1                    ",
            " -2.61799387799149  , -0.866025403784439    ",
            " -2.35619449019234  , -0.707106781186547    ",
            " -2.0943951023932   , -0.5                  ",
            " -1.5707963267949   ,  6.12323399573677E-17 ",
            " -1.0471975511966   ,  0.5                  ",
            " -0.785398163397448 ,  0.707106781186548    ",
            " -0.523598775598299 ,  0.866025403784439    ",
            " -6.30063859969953  ,  0.999847695156391    ",
            " -5.77703982410123  ,  0.874619707139395    ",
            " -5.51524043630208  ,  0.719339800338651    ",
            " -5.25344104850293  ,  0.515038074910054    ",
            " -4.72984227290463  ,  0.017452406437283    ",
            " -4.20624349730633  , -0.484809620246338    ",
            " -3.94444410950718  , -0.694658370458998    ",
            " -3.68264472170804  , -0.857167300702112    ",
            " -3.15904594610974  , -0.999847695156391    ",
            " -2.63544717051144  , -0.874619707139396    ",
            " -2.37364778271229  , -0.719339800338651    ",
            " -2.11184839491314  , -0.515038074910054    ",
            " -1.58824961931484  , -0.017452406437284    ",
            " -1.06465084371654  ,  0.484809620246337    ",
            " -0.802851455917391 ,  0.694658370458997    ",
            " -0.541052068118242 ,  0.857167300702112    ",
            " -6.26573201465964  ,  0.999847695156391    ",
            " -5.74213323906134  ,  0.857167300702112    ",
            " -5.4803338512622   ,  0.694658370458997    ",
            " -5.21853446346305  ,  0.484809620246337    ",
            " -4.69493568786475  , -0.017452406437284    ",
            " -4.17133691226645  , -0.515038074910054    ",
            " -3.9095375244673   , -0.719339800338651    ",
            " -3.64773813666815  , -0.874619707139396    ",
            " -3.12413936106985  , -0.999847695156391    ",
            " -2.60054058547155  , -0.857167300702112    ",
            " -2.3387411976724   , -0.694658370458997    ",
            " -2.07694180987325  , -0.484809620246337    ",
            " -1.55334303427495  ,  0.017452406437284    ",
            " -1.02974425867665  ,  0.515038074910054    ",
            " -0.767944870877505 ,  0.719339800338651    ",
            " -0.506145483078356 ,  0.874619707139396    ",
            "  6.28318530717959  ,  1                    ",
            "  6.80678408277788  ,  0.866025403784439    ",
            "  7.06858347057703  ,  0.707106781186548    ",
            "  7.33038285837618  ,  0.5                  ",
            "  7.85398163397448  ,  3.06161699786838E-16 ",
            "  8.37758040957278  , -0.499999999999999    ",
            "  8.63937979737193  , -0.707106781186547    ",
            "  8.90117918517108  , -0.866025403784439    ",
            "  9.42477796076938  , -1                    ",
            "  9.94837673636768  , -0.866025403784439    ",
            " 10.2101761241668   , -0.707106781186547    ",
            " 10.471975511966    , -0.5                  ",
            " 10.9955742875643   , -4.28626379701574E-16 ",
            " 11.5191730631626   ,  0.499999999999999    ",
            " 11.7809724509617   ,  0.707106781186547    ",
            " 12.0427718387609   ,  0.866025403784439    ",
            "  6.26573201465964  ,  0.999847695156391    ",
            "  6.78933079025794  ,  0.874619707139396    ",
            "  7.05113017805709  ,  0.719339800338651    ",
            "  7.31292956585624  ,  0.515038074910054    ",
            "  7.83652834145454  ,  0.017452406437284    ",
            "  8.36012711705284  , -0.484809620246336    ",
            "  8.62192650485199  , -0.694658370458997    ",
            "  8.88372589265114  , -0.857167300702112    ",
            "  9.40732466824944  , -0.999847695156391    ",
            "  9.93092344384773  , -0.874619707139397    ",
            " 10.1927228316469   , -0.719339800338651    ",
            " 10.454522219446    , -0.515038074910055    ",
            " 10.9781209950443   , -0.017452406437285    ",
            " 11.5017197706426   ,  0.484809620246335    ",
            " 11.7635191584418   ,  0.694658370458997    ",
            " 12.0253185462409   ,  0.857167300702112    ",
            "  6.30063859969953  ,  0.999847695156391    ",
            "  6.82423737529783  ,  0.857167300702113    ",
            "  7.08603676309698  ,  0.694658370458998    ",
            "  7.34783615089613  ,  0.484809620246337    ",
            "  7.87143492649443  , -0.017452406437283    ",
            "  8.39503370209273  , -0.515038074910054    ",
            "  8.65683308989187  , -0.719339800338651    ",
            "  8.91863247769103  , -0.874619707139396    ",
            "  9.44223125328932  , -0.999847695156391    ",
            "  9.96583002888762  , -0.857167300702112    ",
            " 10.2276294166868   , -0.694658370458998    ",
            " 10.4894288044859   , -0.484809620246336    ",
            " 11.0130275800842   ,  0.017452406437284    ",
            " 11.5366263556825   ,  0.515038074910054    ",
            " 11.7984257434817   ,  0.719339800338651    ",
            " 12.0602251312808   ,  0.874619707139396    ",
        ]
    )
    fun testCos(x: Double, expected: Double) {
        Assertions.assertEquals(expected, Algebra(0.01).cos(x), 0.02)
    }

    @ParameterizedTest
    @CsvSource(
        value = [
            "   1                 ,  0                 ",
            "   2.71828182845904  ,  1                 ",
            "   7.38905609893065  ,  2                 ",
            "   20.0855369231877  ,  3                 ",
            "   0.367879441171442 , -1                 ",
            "   0.135335283236613 , -2                 ",
            "   0.049787068367864 , -3                 ",
            "   2                 ,  0.693147180559945 ",
            "   5                 ,  1.6094379124341   ",
            "  10                 ,   2.30258509299405 ",
            " 100                 ,  4.60517018598809  ",
            "   0.9               , -0.105360515657826 ",
            "   2.61828182845904  ,  0.962518311983765 ",
            "   7.28905609893065  ,  1.98637405875277  ",
            "   19.9855369231877  ,  2.99500885811151  ",
            "   0.267879441171442 , -1.31721824605773  ",
            "   0.035335283236613 , -3.342873289119    ",
            "   1.9               ,  0.641853886172395 ",
            "   4.9               ,  1.58923520511658  ",
            "   9.9               ,  2.29253475714054  ",
            "  99.9               ,  4.60416968565451  ",
            "   1.1               ,  0.095310179804325 ",
            "   2.81828182845904  ,  1.03612741857483  ",
            "   7.48905609893065  ,  2.01344276808316  ",
            "   20.1855369231877  ,  3.00496635405951  ",
            "   0.467879441171442 , -0.759544620584711 ",
            "   0.235335283236613 , -1.44674404448335  ",
            "   0.149787068367864 , -1.89854053760754  ",
            "   2.1               ,  0.741937344729377 ",
            "   5.1               ,  1.62924053973028  ",
            "  10.1               ,  2.31253542384721  ",
            " 100.1               ,  4.60616968632117  ",
        ]
    )
    fun testLn(x: Double, expected: Double) {
        Assertions.assertEquals(expected, Algebra(0.01).ln(x), 0.1 * abs(expected))
    }
}
